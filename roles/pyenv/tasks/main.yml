---
# tasks file for ops-pyenv
- name: install pyenv requirements
  apt:
    name:
      - make
      - build-essential
      - libssl-dev
      - zlib1g-dev
      - libbz2-dev
      - libreadline-dev
      - libsqlite3-dev
      - wget
      - curl
      - llvm
      - libncursesw5-dev 
      - xz-utils
      - tk-dev
      - libxml2-dev
      - libxmlsec1-dev
      - libffi-dev
      - liblzma-dev
  become: yes
  when: ansible_os_family == 'Debian'

- name: set pyenv bashrc content fact
  set_fact:
    pyenv_shell_content: "{{ lookup('template', 'templates/pyenv.shell.config.j2') }}"
  tags:
    - "install-pyenv"
    - "uninstall-all"
    - "uninstall-pyenv"

- name: set pyenv begin.profile content fact
  set_fact:
    pyenv_begin_profile_content: "{{ lookup('template', 'templates/pyenv.begin.profile.j2') }}"
  tags:
    - "install-pyenv"
    - "uninstall-all"
    - "uninstall-pyenv"

- name: set pyenv end.profile content fact
  set_fact:
    pyenv_end_profile_content: "{{ lookup('template', 'templates/pyenv.end.profile.j2') }}"
  tags:
    - "install-pyenv"
    - "uninstall-all"
    - "uninstall-pyenv"

- name: install pyenv
  block:
    - name: install pyenv
      shell:
        cmd: curl https://pyenv.run | bash
        creates: "{{ user_home }}/.pyenv/bin/pyenv"

    - name: "add pyenv to {{ ansible_user_shell }}"
      blockinfile:
        block: "{{ pyenv_shell_content }}"
        marker: "# {mark} OPS TOOLS MANAGED BLOCK (pyenv.shell.config)"
        path: "{% if ansible_user_shell == '/bin/bash' %}~/.bashrc{% elif ansible_user_shell in ['/bin/zsh', '/usr/bin/zsh']%}~/.zshrc{% endif %}"

    - name: add pyenv to begin.profile
      blockinfile:
        block: "{{ pyenv_begin_profile_content }}"
        marker: "# {mark} OPS TOOLS MANAGED BLOCK (pyenv.begin.profile)"
        path: "{% if ansible_user_shell == '/bin/bash' %}~/.profile{% elif ansible_user_shell in ['/bin/zsh', '/usr/bin/zsh']%}~/.zprofile{% endif %}"
        insertbefore: BOF
        create: "yes"

    - name: add pyenv to begin.profile
      blockinfile:
        block: "{{ pyenv_begin_profile_content }}"
        marker: "# {mark} OPS TOOLS MANAGED BLOCK (pyenv.begin.profile)"
        path: "~/.profile"
        insertbefore: BOF
      when: ansible_os_family != 'Darwin' and ansible_user_shell == '/bin/zsh'

    - name: add pyenv to end.profile
      blockinfile:
        block: "{{ pyenv_end_profile_content }}"
        marker: "# {mark} OPS TOOLS MANAGED BLOCK (pyenv.end.profile)"
        path: "{% if ansible_user_shell == '/bin/bash' %}~/.profile{% elif ansible_user_shell in ['/bin/zsh', '/usr/bin/zsh']%}~/.zprofile{% endif %}"
        insertafter: EOF
        create: "yes"

    - name: add pyenv to end.profile
      blockinfile:
        block: "{{ pyenv_end_profile_content }}"
        marker: "# {mark} OPS TOOLS MANAGED BLOCK (pyenv.end.profile)"
        path: "~/.profile"
        insertafter: EOF
      when: ansible_os_family != 'Darwin' and ansible_user_shell in ['/bin/zsh', '/usr/bin/zsh']
  tags:
    - "install-pyenv"

- name: Create a symbolic link from .profile to .bash_profile
  ansible.builtin.file:
    src: ~/.profile
    dest: ~/.bash_profile
    state: link
  tags:
    - "install-pyenv"

- name: "update pyenv (this could take a while)"
  shell:
    cmd: "{{ user_home }}/.pyenv/bin/pyenv update"
  tags:
    - "install-python"

- name: "install python version {{ python_version }} (this could take a while)"
  shell:
    cmd: "{{ user_home }}/.pyenv/bin/pyenv install {{ python_version }}"
    creates: "{{ user_home }}/.pyenv/versions/{{ python_version }}"
  tags:
    - "install-python"

- name: uninstall pyenv
  block:
    - name: uninstall pyenv
      file:
        path: "{{ user_home }}/.pyenv"
        state: absent
    
    - name: "remove pyenv from {{ ansible_user_shell }}"
      blockinfile:
        block: "{{ pyenv_shell_content }}"
        marker: "# {mark} OPS TOOLS MANAGED BLOCK (pyenv.shell.config)"
        path: "{% if ansible_user_shell == '/bin/bash' %}~/.bashrc{% elif ansible_user_shell in ['/bin/zsh', '/usr/bin/zsh']%}~/.zshrc{% endif %}"
        state: absent

    - name: remove pyenv from begin.profile
      blockinfile:
        block: "{{ pyenv_begin_profile_content }}"
        marker: "# {mark} OPS TOOLS MANAGED BLOCK (pyenv.begin.profile)"
        path: "{% if ansible_user_shell == '/bin/bash' %}~/.profile{% elif ansible_user_shell in ['/bin/zsh', '/usr/bin/zsh']%}~/.zprofile{% endif %}"
        insertbefore: BOF
        state: absent

    - name: remove pyenv from begin.profile
      blockinfile:
        block: "{{ pyenv_begin_profile_content }}"
        marker: "# {mark} OPS TOOLS MANAGED BLOCK (pyenv.begin.profile)"
        path: "~/.profile"
        insertbefore: BOF
        state: absent
      when: ansible_os_family != 'Darwin' and ansible_user_shell in ['/bin/zsh', '/usr/bin/zsh']

    - name: remove pyenv from end.profile
      blockinfile:
        block: "{{ pyenv_end_profile_content }}"
        marker: "# {mark} OPS TOOLS MANAGED BLOCK (pyenv.end.profile)"
        path: "{% if ansible_user_shell == '/bin/bash' %}~/.profile{% elif ansible_user_shell in ['/bin/zsh', '/usr/bin/zsh']%}~/.zprofile{% endif %}"
        insertafter: EOF
        state: absent

    - name: remove pyenv from end.profile
      blockinfile:
        block: "{{ pyenv_end_profile_content }}"
        marker: "# {mark} OPS TOOLS MANAGED BLOCK (pyenv.end.profile)"
        path: "~/.profile"
        insertafter: EOF
        state: absent
      when: ansible_os_family != 'Darwin' and ansible_user_shell in ['/bin/zsh', '/usr/bin/zsh']

  tags:
    - "uninstall-all"
    - "uninstall-pyenv"
    - "never"

- name: "uninstall python version {{ python_version }} (this could take a while)"
  shell:
    cmd: "{{ user_home }}/.pyenv/bin/pyenv uninstall -f {{ python_version }}"
  tags:
    - "uninstall-virtualenv"
    - "uninstall-python"
    - "never"