---
# tasks file for ops-virtualenv
- name: set direnv.virtualenv.config content fact
  set_fact:
    direnv_virtualenv_config_content: "{{ lookup('template', 'templates/direnv.virtualenv.config.j2') }}"
  tags:
    - "install-virtualenv"
    - "uninstall-all"
    - "uninstall-virtualenv"

- name: set virtualenv.environment.config content fact
  set_fact:
    virtualenv_environment_config_content: "{{ lookup('template', 'templates/virtualenv.environment.config.j2') }}"
  tags:
    - "install-virtualenv"
    - "uninstall-all"
    - "uninstall-virtualenv"

- name: set virtualenv.shell.config content fact
  set_fact:
    virtualenv_shell_config_content: "{{ lookup('template', 'templates/virtualenv.shell.config.j2') }}"
  tags:
    - "install-virtualenv"
    - "uninstall-all"
    - "uninstall-virtualenv"

- name: install virtualenv
  block:
    - name: create virtualenv user config directory
      file:
        path: "{{ virtualenv_user_config }}"
        state: directory

    - name: create virtualenv user cache directory
      file:
        path: "{{ virtualenv_user_cache }}"
        state: directory

    - name: create virtualenv user data directory
      file:
        path: "{{ virtualenv_user_data }}"
        state: directory

    - name: create direnv.base.config directory
      file:
        path: "{{ xdg_config_home }}/direnv"
        state: directory

    - name: copy direnv.virtualenv.config remote
      blockinfile:
        block: "{{ direnv_virtualenv_config_content }}"
        marker: "# {mark} {{ virtualenv_name|upper }} TOOLS MANAGED BLOCK (direnv.virtualenv.config)"
        path: "{{ xdg_config_home }}/direnv/direnvrc"
        create: "yes"

    - name: upgrade python pip version (this could take a while)
      shell:
        cmd: "{{ user_home }}/.pyenv/versions/{{ python_version }}/bin/python -m pip install --upgrade pip"

    - name: "create virtualenv {{ virtualenv_name }}"
      shell:
        cmd: "~/.pyenv/bin/pyenv virtualenv {{ python_version }} {{ virtualenv_name }}"
        creates: '{{ user_home }}/.pyenv/versions/{{ virtualenv_name }}'

    - name: "add {{ virtualenv_name }}.(activate|deactivate) to {{ ansible_user_shell }}"
      blockinfile:
        block: "{{ virtualenv_shell_config_content }}"
        marker: "# {mark} OPS TOOLS MANAGED BLOCK ({{ virtualenv_name }}.virtualenv.shell.config)"
        path: "{% if ansible_user_shell == '/bin/bash' %}~/.bashrc{% elif ansible_user_shell in ['/bin/zsh', '/usr/bin/zsh']%}~/.zshrc{% endif %}"

    - name: upgrade python pip version (this could take a while)
      shell:
        cmd: "{{ user_home }}/.pyenv/versions/{{ virtualenv_name }}/bin/python -m pip install --upgrade pip"

    - name: add virtualenv.environment.config to virtualenv
      blockinfile:
        block: "{{ virtualenv_environment_config_content }}"
        marker: "# {mark} {{ virtualenv_name|upper }} TOOLS MANAGED BLOCK (virtualenv.environment.config)"
        path: "{{ virtualenv_environment_file }}"
        create: "yes"
      notify: "direnv.allow"
  tags:
    - "install-virtualenv"

- name: "delete virtualenv {{ virtualenv_name }}"
  shell:
    cmd: "~/.pyenv/bin/pyenv virtualenv-delete -f {{ virtualenv_name }}"
  tags:
    - "uninstall-virtualenv"
    - "never"

- name: uninstall virtualenv
  block:
    - name: remove direnv.base.config directory
      file:
        path: "{{ xdg_config_home }}/direnv"
        state: absent

    - name: remove virtualenv.environment.config file
      file:
        path: "{{ virtualenv_environment_file }}"
        state: absent

    - name: "add {{ virtualenv_name }}.(activate|deactivate) to {{ ansible_user_shell }}"
      blockinfile:
        block: "{{ virtualenv_shell_config_content }}"
        marker: "# {mark} OPS TOOLS MANAGED BLOCK ({{ virtualenv_name }}.virtualenv.shell.config)"
        path: "{% if ansible_user_shell == '/bin/bash' %}~/.bashrc{% elif ansible_user_shell in ['/bin/zsh', '/usr/bin/zsh']%}~/.zshrc{% endif %}"
        state: absent
  tags:
    - "uninstall-all"
    - "uninstall-virtualenv"
    - "never"